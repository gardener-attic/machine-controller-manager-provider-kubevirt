// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/machine-controller-manager-provider-kubevirt/pkg/kubevirt/core (interfaces: ClientFactory,ServerVersionFactory,Timer)

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientFactory) GetClient(arg0 *v1.Secret) (client.Client, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientFactoryMockRecorder) GetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientFactory)(nil).GetClient), arg0)
}

// MockServerVersionFactory is a mock of ServerVersionFactory interface.
type MockServerVersionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerVersionFactoryMockRecorder
}

// MockServerVersionFactoryMockRecorder is the mock recorder for MockServerVersionFactory.
type MockServerVersionFactoryMockRecorder struct {
	mock *MockServerVersionFactory
}

// NewMockServerVersionFactory creates a new mock instance.
func NewMockServerVersionFactory(ctrl *gomock.Controller) *MockServerVersionFactory {
	mock := &MockServerVersionFactory{ctrl: ctrl}
	mock.recorder = &MockServerVersionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerVersionFactory) EXPECT() *MockServerVersionFactoryMockRecorder {
	return m.recorder
}

// GetServerVersion mocks base method.
func (m *MockServerVersionFactory) GetServerVersion(arg0 *v1.Secret) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerVersion indicates an expected call of GetServerVersion.
func (mr *MockServerVersionFactoryMockRecorder) GetServerVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersion", reflect.TypeOf((*MockServerVersionFactory)(nil).GetServerVersion), arg0)
}

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimer) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimer)(nil).Now))
}
